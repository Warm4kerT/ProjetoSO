Hello - from c:\Users\turtl\.vscode\extensions\jaredly.reason-vscode-1.7.8\bin.native.exe.hot.exe
Previous log location: C:\Users\turtl\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///d%3A/Documents/UBI/Ocaml/TeoriaC/projeto2.ml","languageId":"ocaml","version":1,"text":"open String;;\r\nopen Array;;\r\n\r\nlet linha1=read_line();;(* Leitura do input*)\r\nlet linha2=read_line();;\r\n\r\nlet rec caracter a b c =(*Função recursiva auxiliar para confirmar os caracteres*)\r\n    if c=0 then\r\n      true\r\n    else  \r\n        match b with\r\n            | 'a' | 't' | 'g' | 'c' -> caracter a (a.[c-1]) (c-1)\r\n            | _ -> false\r\n\r\nlet confirma s = (*Função para verificar os caracteres*)\r\n    let tam = ((String.length s)-1) in \r\n    let carc = s.[tam] in\r\n    if tam>500000 then\r\n      false\r\n    else\r\n      caracter s carc tam\r\n\r\nlet comString s1 s2 = (*Função Principal de retorno do numero de caracteres em comum*)\r\n  let tam1= String.length s1 in\r\n  let tam2= String.length s2 in\r\n  let x= Array.make_matrix (tam1+1) (tam2+1) 0 in (*Criação da Matrix*)\r\n  let a : int ref = ref 0 in\r\n\r\n  for i=1 to tam1 do                              (* *)\r\n    for j=1 to tam2 do                            (* *)\r\n      if s1.[i-1] = s2.[j-1] then                 (* *)\r\n        (x.(i).(j) <- x.(i-1).(j-1)+1;            (* *)\r\n        a := max x.(i).(j) !a)                    (*Guarda sempre o maior valor*)\r\n      else                                        (* *)\r\n        x.(i).(j) <- 0                            (* *)\r\n    done;                                         (* *)\r\n  done;\r\n  !a\r\n\r\n  let()=\r\n  if (confirma (\"#\" ^ lowercase_ascii(linha1))) && (confirma (\"#\" ^ lowercase_ascii(linha2))) then\r\n    Printf.printf \"%d\\n\" (comString (lowercase_ascii(linha1)) (lowercase_ascii(linha2)))\r\n  else\r\n    Printf.printf \"Input Invalido\\n\"\r\n\r\n(*code based on https://www.geeksforgeeks.org/longest-common-substring-dp-29/*)\r\n"}}}
